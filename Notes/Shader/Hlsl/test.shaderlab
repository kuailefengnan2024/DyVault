Shader "Custom/VoronoiStarBlur"
{
    Properties
    {
        _Scale ("Scale", Float) = 10.0       // 控制星点分布密度
        _Threshold ("Threshold", Float) = 0.1 // 控制星点基础大小
        _Blur ("Blur", Float) = 0.05        // 控制模糊程度
    }
    SubShader
    {
        Tags { "RenderType"="Opaque" }
        LOD 100

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            float _Scale;      // 控制噪声缩放
            float _Threshold;  // 星点基础大小阈值
            float _Blur;       // 模糊程度参数

            struct appdata
            {
                float4 vertex : POSITION; // 顶点位置
                float2 uv : TEXCOORD0;    // UV坐标
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;   // 传递UV坐标
                float4 pos : SV_POSITION; // 顶点位置
            };

            // 哈希函数，用于生成随机值
            float hash(float p)
            {
                p = frac(sin(p) * 43758.5453);
                return p;
            }

            float2 hash21(float2 p)
            {
                p = frac(sin(dot(p, float2(12.9898, 78.233))) * 43758.5453);
                return frac(float2(p.x * p.y, p.x + p.y)); // 返回伪随机float2
            }

            // Voronoi噪声函数
            float voronoi(float2 uv, float scale, out float intensity)
            {
                uv *= scale; // 放大UV坐标
                float2 g = floor(uv); // 当前网格的整数坐标
                float2 f = frac(uv);  // 当前网格内的小数部分

                float minDist = 1.0; // 初始化最小距离
                intensity = 0.0;     // 初始化星点随机强度

                for (int y = -1; y <= 1; y++) // 遍历相邻网格
                {
                    for (int x = -1; x <= 1; x++)
                    {
                        float2 lattice = float2(x, y);                // 相邻网格的偏移
                        float2 randomOffset = hash21(g + lattice);    // 随机偏移量
                        float2 neighbor = g + lattice + randomOffset; // 相邻网格的随机点
                        float dist = length(f - (neighbor - g));      // 计算当前像素到随机点的距离

                        // 更新最小距离并记录强度
                        if (dist < minDist)
                        {
                            minDist = dist;
                            intensity = 0.3 + 0.4 * hash(dot(neighbor, float2(7.0, 3.0))); // 生成星点随机强度
                        }
                    }
                }
                return minDist; // 返回最小距离
            }

            // 顶点着色器
            v2f vert (appdata v)
            {
                v2f o;
                o.pos = UnityObjectToClipPos(v.vertex); // 转换到裁剪空间
                o.uv = v.uv;                            // 传递UV坐标
                return o;
            }

            // 片段着色器
            fixed4 frag (v2f i) : SV_Target
            {
                // 生成Voronoi噪声，并获取星点强度（大小随机化）
                float intensity;
                float noise = voronoi(i.uv, _Scale, intensity);

                // 模糊处理：通过 smoothstep 将星点边缘变得柔和
                float star = smoothstep(_Threshold * 0.01 + _Blur * 0.01, _Threshold * 0.01 - _Blur * 0.01, noise * intensity);

                // 输出星点图，亮度随机化，边缘柔和
                return fixed4(star * intensity, star * intensity, star * intensity, 1); // 星点随机亮度且带模糊
            }
            ENDCG
        }
    }
    FallBack "Diffuse"
}